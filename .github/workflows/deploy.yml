name: ðŸš€ Deploy to VPS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy Laravel App to VPS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env.production file
        run: |
          cat > .env.production <<EOF
          APP_NAME=${{ vars.APP_NAME }}
          APP_ENV=${{ vars.APP_ENV }}
          APP_KEY=${{ secrets.APP_KEY }}
          APP_DEBUG=${{ vars.APP_DEBUG }}
          APP_URL=${{ vars.APP_URL }}
          ASSET_URL=${{ vars.ASSET_URL }}

          APP_LOCALE=${{ vars.APP_LOCALE }}
          APP_FALLBACK_LOCALE=${{ vars.APP_FALLBACK_LOCALE }}
          APP_FAKER_LOCALE=${{ vars.APP_FAKER_LOCALE }}
          APP_TIMEZONE=${{ vars.APP_TIMEZONE }}

          APP_MAINTENANCE_DRIVER=${{ vars.APP_MAINTENANCE_DRIVER }}
          PHP_CLI_SERVER_WORKERS=${{ vars.PHP_CLI_SERVER_WORKERS }}
          BCRYPT_ROUNDS=${{ vars.BCRYPT_ROUNDS }}

          LOG_CHANNEL=${{ vars.LOG_CHANNEL }}
          LOG_STACK=${{ vars.LOG_STACK }}
          LOG_DEPRECATIONS_CHANNEL=${{ vars.LOG_DEPRECATIONS_CHANNEL }}
          LOG_LEVEL=${{ vars.LOG_LEVEL }}

          DB_CONNECTION=${{ vars.DB_CONNECTION }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_DATABASE=${{ secrets.DB_DATABASE }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}

          SESSION_DRIVER=${{ vars.SESSION_DRIVER }}
          SESSION_LIFETIME=${{ vars.SESSION_LIFETIME }}
          SESSION_ENCRYPT=${{ vars.SESSION_ENCRYPT }}
          SESSION_PATH=${{ vars.SESSION_PATH }}
          SESSION_DOMAIN=${{ vars.SESSION_DOMAIN }}

          HASH_DRIVER=${{ vars.HASH_DRIVER }}

          VITE_APP_NAME="${VITE_APP_NAME}"
          VITE_APP_URL="${VITE_APP_URL}"
          EOF

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Upload .env.production to VPS
        run: |
          scp -i ~/.ssh/id_ed25519 .env.production ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/dev/.env.${{ vars.APP_NAME }}

      - name: Deploy via SSH
        run: |
          ssh -T ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} -i ~/.ssh/id_ed25519 << 'EOF'
            set -e
            
            # Check if the Docker project directory exists, and create it if not
            echo "ðŸ“‚ Checking if Docker project directory exists..."
            if [ -d "${{ vars.VPS_DOCKER_PATH }}" ]; then
              echo "Docker project directory exists. Deleting it..."
              rm -rf ${{ vars.VPS_DOCKER_PATH }} || { echo "Error: Failed to delete Docker project directory."; exit 1; }
            fi

            echo "Creating Docker project directory..."
            mkdir -p ${{ vars.VPS_DOCKER_PATH }} || { echo "Error: Failed to create Docker project directory."; exit 1; }
            
            # Navigate to the Docker project directory
            cd ${{ vars.VPS_DOCKER_PATH }}

            # Check if the current directory is a Git repository
            echo "ðŸ“¥ Checking if directory is a Git repository..."
            if [ ! -d ".git" ]; then
              echo "No Git repository found. Cloning repository..."
              git clone --single-branch --branch main git@github.com:letio-dev/wsimpleapp.git . || { echo "Error: Failed to clone repository."; exit 1; }
            fi

            # # Pull the latest changes from the repository
            # echo "ðŸ“¥ Pulling latest code..."
            # git pull origin main || { echo "Error: Failed to pull the latest code."; exit 1; }

            # scp -i ~/.ssh/id_ed25519 .env.production ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ vars.VPS_DOCKER_PATH }}/.env.production
            echo "âœ… .env.production copied to Project."
            mv /home/dev/.env.${{ vars.APP_NAME }} ${{ vars.VPS_DOCKER_PATH }}/.env.production

            # Check if the .env.production file exists before copying
            echo "âœ… Copying .env.production to .env"
            if [ -f .env.production ]; then
              cp .env.production .env
            else
              echo "Error: .env.production not found. Aborting."; exit 1;
            fi

            # Check if the target directory exists, and create it if not
            echo "Checking if target directory exists..."
            if [ ! -d "/home/dev/docker/volumes/${{ vars.APP_NAME }}" ]; then
              echo "Target directory does not exist. Creating it..."
              mkdir -p /home/dev/docker/volumes/${{ vars.APP_NAME }} || { echo "Error: Failed to create target directory."; exit 1; }

              # Check if the storage directory exists before moving it
              echo "Moving storage directory..."
              if [ -d "${{ vars.VPS_DOCKER_PATH }}/storage" ]; then
                mv ${{ vars.VPS_DOCKER_PATH }}/storage /home/dev/docker/volumes/${{ vars.APP_NAME }}
              else
                echo "Error: storage directory does not exist. Aborting."; exit 1;
              fi
            fi

            # Rebuild and restart Docker services
            echo "ðŸ“¦ Rebuilding and restarting Docker..."
            docker compose down || { echo "Error: Failed to bring Docker services down."; exit 1; }
            docker compose up -d --build || { echo "Error: Failed to bring Docker services up."; exit 1; }

            # Run migrations with error handling
            echo "ðŸ›  Running migrations..."
            docker exec wsimpleapp php artisan migrate --force || { echo "Error: Migrations failed."; exit 1; }

            echo "Copying assets to S3..."
            docker exec wsimpleapp bash <<INNER_EOF
            # Cek awscli
            if ! command -v aws &> /dev/null
            then
                echo "awscli not found. Installing awscli..."
                apt update && apt install awscli -y
            fi

            # Export credentials sementara
            export AWS_ACCESS_KEY_ID="${{ secrets.S3_ACCESS_KEY }}"
            export AWS_SECRET_ACCESS_KEY="${{ secrets.S3_SECRET_KEY }}"

            # Kosongkan dulu folder tujuan
            echo "Deleting old files in S3 bucket path (${{ vars.S3_BUCKET }}/${{ vars.S3_PREFIX }}/build)..."
            aws --endpoint-url="$ENDPOINT" s3 rm "s3://${{ vars.S3_BUCKET }}/${{ vars.S3_PREFIX }}/build" --recursive

            # Upload semua file
            echo "Uploading files to S3..."
            aws --endpoint-url="$ENDPOINT" s3 cp "/var/www/public/build" "s3://${{ vars.S3_BUCKET }}/${{ vars.S3_PREFIX }}/build/" --recursive --acl public-read

            # Buat file CORS policy
            echo "Creating CORS file..."
            cat > /tmp/cors.json <<CORS_EOF
            {
              "CORSRules": [
                {
                  "AllowedHeaders": ["*"],
                  "AllowedMethods": ["GET", "POST", "PUT", "DELETE", "HEAD"],
                  "AllowedOrigins": [${{ vars.S3_CORS_ALLOW_ORIGINS }}],
                  "ExposeHeaders": [],
                  "MaxAgeSeconds": 3000
                }
              ]
            }
            CORS_EOF

            # Set CORS ke bucket
            echo "Setting CORS configuration..."
            aws --endpoint-url="$ENDPOINT" s3api put-bucket-cors --bucket "${{ vars.S3_BUCKET }}" --cors-configuration file:///tmp/cors.json

            # Bersihkan file sementara
            rm -f /tmp/cors.json

            echo "All done successfully!"
            INNER_EOF

            echo "âœ… Finished deploying!"

          EOF
